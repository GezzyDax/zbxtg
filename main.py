#!/usr/bin/env python3
"""
Zabbix Telegram Bot - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–ª–µ—Ä—Ç—ã –∏–∑ Zabbix –≤ Telegram –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python main.py

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
    ZABBIX_URL - URL —Å–µ—Ä–≤–µ—Ä–∞ Zabbix (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    ZABBIX_USERNAME - –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Zabbix (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    ZABBIX_PASSWORD - –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Zabbix (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    TELEGRAM_BOT_TOKEN - —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    TELEGRAM_CHAT_ID - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    
    POLL_INTERVAL - –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 60)
    LOG_LEVEL - —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: INFO)
    ZABBIX_SSL_VERIFY - –ø—Ä–æ–≤–µ—Ä–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: true)
"""

import asyncio
import logging
import os
import signal
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, str(Path(__file__).parent))

from config import get_config, AppConfig
from zabbix_client import ZabbixClient
from telegram_bot import TelegramBot
from alert_monitor import AlertMonitor


class ZabbixTelegramBot:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        self.config: AppConfig = None
        self.zabbix_client: ZabbixClient = None
        self.telegram_bot: TelegramBot = None
        self.alert_monitor: AlertMonitor = None
        self.logger = logging.getLogger(__name__)
        
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        log_level = getattr(logging, self.config.log_level.upper(), logging.INFO)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        os.makedirs('logs', exist_ok=True)
        
        logging.basicConfig(
            level=log_level,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.StreamHandler(sys.stdout),
                logging.FileHandler('logs/zbxtg.log')
            ]
        )
        
        # –°–Ω–∏–∂–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
        logging.getLogger('httpx').setLevel(logging.WARNING)
        logging.getLogger('telegram').setLevel(logging.WARNING)
        logging.getLogger('urllib3').setLevel(logging.WARNING)
        
        self.logger.info(f"Logging initialized with level: {self.config.log_level}")
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            self.config = get_config()
            self.setup_logging()
            
            self.logger.info("Starting Zabbix Telegram Bot...")
            self.logger.info(f"Zabbix URL: {self.config.zabbix.url}")
            self.logger.info(f"Target Chat ID: {self.config.telegram.target_chat_id}")
            self.logger.info(f"Poll interval: {self.config.poll_interval}s")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç—ã
            self.zabbix_client = ZabbixClient(self.config.zabbix)
            self.telegram_bot = TelegramBot(self.config.telegram)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            self.logger.info("Checking connections...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Zabbix
            if not self.zabbix_client.authenticate():
                raise RuntimeError("Failed to authenticate to Zabbix")
            self.logger.info("‚úì Zabbix connection successful")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram
            if not await self.telegram_bot.check_connection():
                raise RuntimeError("Failed to connect to Telegram")
            self.logger.info("‚úì Telegram connection successful")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram –±–æ—Ç–∞
            await self.telegram_bot.initialize()
            
            # –°–æ–∑–¥–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä –∞–ª–µ—Ä—Ç–æ–≤
            self.alert_monitor = AlertMonitor(
                self.config, 
                self.zabbix_client, 
                self.telegram_bot
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä –≤ –±–æ—Ç–µ
            self.telegram_bot.set_alert_monitor(self.alert_monitor)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.send_startup_message()
            
            self.logger.info("All components initialized successfully")
            
        except Exception as e:
            self.logger.error(f"Initialization failed: {e}")
            raise
    
    async def send_startup_message(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞"""
        try:
            message = """
üöÄ <b>Zabbix Monitor Started</b>

‚úÖ Successfully connected to:
- Zabbix API
- Telegram Bot API

üîî I will now monitor for new alerts and send them to this chat.

Use /help to see available commands.
            """.strip()
            
            await self.telegram_bot.send_message(message)
            
        except Exception as e:
            self.logger.error(f"Failed to send startup message: {e}")
    
    async def send_shutdown_message(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞"""
        try:
            message = "üõë <b>Zabbix Monitor Stopped</b>\n\nMonitoring has been terminated."
            await self.telegram_bot.send_message(message)
            
        except Exception as e:
            self.logger.error(f"Failed to send shutdown message: {e}")
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            await self.initialize()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            tasks = [
                asyncio.create_task(self.telegram_bot.start(), name="telegram_bot"),
                asyncio.create_task(self.alert_monitor.start_monitoring(), name="alert_monitor")
            ]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            def signal_handler():
                self.logger.info("Received shutdown signal")
                for task in tasks:
                    task.cancel()
                self.alert_monitor.stop_monitoring()
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
            for sig in [signal.SIGTERM, signal.SIGINT]:
                signal.signal(sig, lambda s, f: signal_handler())
            
            self.logger.info("Bot is running. Press Ctrl+C to stop.")
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
            try:
                await asyncio.gather(*tasks)
            except asyncio.CancelledError:
                self.logger.info("Tasks cancelled, shutting down...")
            
        except KeyboardInterrupt:
            self.logger.info("Received keyboard interrupt")
        except Exception as e:
            self.logger.error(f"Runtime error: {e}")
            raise
        finally:
            await self.shutdown()
    
    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        self.logger.info("Shutting down...")
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
            if self.telegram_bot:
                await self.send_shutdown_message()
                
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            if self.alert_monitor:
                self.alert_monitor.stop_monitoring()
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegram –±–æ—Ç–∞
            if self.telegram_bot:
                await self.telegram_bot.stop()
                
        except Exception as e:
            self.logger.error(f"Error during shutdown: {e}")
        
        self.logger.info("Shutdown complete")


async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    bot = ZabbixTelegramBot()
    
    try:
        await bot.run()
    except KeyboardInterrupt:
        print("\nShutdown requested...")
    except Exception as e:
        print(f"Fatal error: {e}")
        sys.exit(1)


if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é Python
    if sys.version_info < (3, 8):
        print("Error: Python 3.8 or higher is required")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nGoodbye!")
    except Exception as e:
        print(f"Failed to start: {e}")
        sys.exit(1)