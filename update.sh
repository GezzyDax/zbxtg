#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Zabbix Telegram Bot —Å GitHub

set -e

echo ""
echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Zabbix Telegram Bot"
echo "================================="
echo ""

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å–∫—Ä–∏–ø—Ç–∞
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$SCRIPT_DIR"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–∞–Ω–¥
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–∞–Ω–¥—ã
if ! command_exists git; then
    echo "‚ùå Git –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ git"
    exit 1
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
if [[ ! -d ".git" ]]; then
    echo "‚ùå –≠—Ç–æ –Ω–µ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π"
    echo "–°–∫–ª–æ–Ω–∏—Ä—É–π—Ç–µ –ø—Ä–æ–µ–∫—Ç: git clone https://github.com/GezzyDax/zbxtg.git"
    exit 1
fi

# –°–æ—Ö—Ä–∞–Ω—è–µ–º .env —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
ENV_BACKUP=""
if [[ -f ".env" ]]; then
    ENV_BACKUP=$(mktemp)
    echo "üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é .env..."
    cp .env "$ENV_BACKUP"
fi

# –°–æ—Ö—Ä–∞–Ω—è–µ–º SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
SSL_BACKUP=""
if [[ -d "ssl-certs" ]] && [[ -n "$(ls -A ssl-certs 2>/dev/null)" ]]; then
    SSL_BACKUP=$(mktemp -d)
    echo "üîí –°–æ—Ö—Ä–∞–Ω—è–µ–º SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã..."
    cp -r ssl-certs/* "$SSL_BACKUP/"
fi

# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–º–º–∏—Ç
CURRENT_COMMIT=$(git rev-parse HEAD 2>/dev/null || echo "unknown")
echo "üìç –¢–µ–∫—É—â–∏–π –∫–æ–º–º–∏—Ç: ${CURRENT_COMMIT:0:8}"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
echo "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è..."
git fetch origin

# –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç –∏–∑ origin/master
LATEST_COMMIT=$(git rev-parse origin/master 2>/dev/null || git rev-parse origin/main 2>/dev/null)
echo "üìç –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç: ${LATEST_COMMIT:0:8}"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
if [[ "$CURRENT_COMMIT" == "$LATEST_COMMIT" ]]; then
    echo "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è. –£ –≤–∞—Å –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è."
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
    if [[ -n "$ENV_BACKUP" ]]; then
        rm "$ENV_BACKUP"
    fi
    if [[ -n "$SSL_BACKUP" ]]; then
        rm -rf "$SSL_BACKUP"
    fi
    
    exit 0
fi

echo ""
echo "üÜï –î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ!"
echo ""

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
echo "üìù –ò–∑–º–µ–Ω–µ–Ω–∏—è:"
git log --oneline "$CURRENT_COMMIT..$LATEST_COMMIT" | head -10

echo ""
read -p "‚ùì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ? (y/N): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
    exit 0
fi

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞ –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω
if command_exists docker-compose || command_exists docker; then
    echo "‚èπÔ∏è  –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞..."
    if [[ -f "docker-run.sh" ]]; then
        ./docker-run.sh stop 2>/dev/null || true
    else
        docker-compose down 2>/dev/null || true
    fi
fi

# –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥
echo "‚¨áÔ∏è  –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è..."
git stash push -u -m "Auto-stash before update $(date)" 2>/dev/null || true
git pull origin master 2>/dev/null || git pull origin main

# –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º .env —Ñ–∞–π–ª
if [[ -n "$ENV_BACKUP" ]]; then
    echo "üîß –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é .env..."
    cp "$ENV_BACKUP" .env
    rm "$ENV_BACKUP"
fi

# –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
if [[ -n "$SSL_BACKUP" ]]; then
    echo "üîí –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã..."
    mkdir -p ssl-certs
    cp -r "$SSL_BACKUP"/* ssl-certs/
    rm -rf "$SSL_BACKUP"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö
if git diff "$CURRENT_COMMIT" HEAD --name-only | grep -q "requirements.txt"; then
    echo "üì¶ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö - –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞"
    REBUILD_NEEDED=true
else
    REBUILD_NEEDED=false
fi

# –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º Docker –æ–±—Ä–∞–∑ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
if [[ -f "Dockerfile" ]] && (command_exists docker-compose || command_exists docker); then
    if [[ "$REBUILD_NEEDED" == "true" ]]; then
        echo "üî® –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º Docker –æ–±—Ä–∞–∑..."
        if [[ -f "docker-run.sh" ]]; then
            ./docker-run.sh build
        else
            docker-compose build --no-cache
        fi
    fi
    
    echo "‚ñ∂Ô∏è  –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞..."
    if [[ -f "docker-run.sh" ]]; then
        ./docker-run.sh start
    else
        docker-compose up -d
    fi
else
    echo "‚ö†Ô∏è  Docker –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –≤—Ä—É—á–Ω—É—é:"
    echo "   python main.py"
fi

echo ""
echo "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
echo "üÜï –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å ${CURRENT_COMMIT:0:8} –¥–æ $(git rev-parse HEAD | cut -c1-8)"

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –µ—Å–ª–∏ Docker –¥–æ—Å—Ç—É–ø–µ–Ω
if [[ -f "docker-run.sh" ]]; then
    echo ""
    echo "üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:"
    ./docker-run.sh status || true
fi

echo ""
echo "üéâ –ì–æ—Ç–æ–≤–æ! –ë–æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω."