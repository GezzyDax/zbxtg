# PowerShell —Å–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Zabbix Telegram Bot —Å GitHub

param(
    [switch]$Force = $false
)

Write-Host ""
Write-Host "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Zabbix Telegram Bot" -ForegroundColor Cyan
Write-Host "=================================" -ForegroundColor Cyan
Write-Host ""

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Git
if (-not (Get-Command "git" -ErrorAction SilentlyContinue)) {
    Write-Host "‚ùå Git –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Git" -ForegroundColor Red
    exit 1
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
if (-not (Test-Path ".git")) {
    Write-Host "‚ùå –≠—Ç–æ –Ω–µ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π" -ForegroundColor Red
    Write-Host "–°–∫–ª–æ–Ω–∏—Ä—É–π—Ç–µ –ø—Ä–æ–µ–∫—Ç: git clone https://github.com/GezzyDax/zbxtg.git"
    exit 1
}

# –°–æ—Ö—Ä–∞–Ω—è–µ–º .env —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
$envBackup = $null
if (Test-Path ".env") {
    $envBackup = New-TemporaryFile
    Write-Host "üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é .env..." -ForegroundColor Yellow
    Copy-Item ".env" $envBackup.FullName
}

# –°–æ—Ö—Ä–∞–Ω—è–µ–º SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
$sslBackup = $null
if ((Test-Path "ssl-certs") -and (Get-ChildItem "ssl-certs" -ErrorAction SilentlyContinue)) {
    $sslBackup = New-Item -ItemType Directory -Path ([System.IO.Path]::GetTempPath()) -Name "ssl-backup-$(Get-Date -Format 'yyyyMMdd-HHmmss')"
    Write-Host "üîí –°–æ—Ö—Ä–∞–Ω—è–µ–º SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã..." -ForegroundColor Yellow
    Copy-Item "ssl-certs\*" $sslBackup.FullName -Recurse
}

# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–º–º–∏—Ç
try {
    $currentCommit = git rev-parse HEAD
    Write-Host "üìç –¢–µ–∫—É—â–∏–π –∫–æ–º–º–∏—Ç: $($currentCommit.Substring(0,8))" -ForegroundColor Gray
} catch {
    $currentCommit = "unknown"
    Write-Host "üìç –¢–µ–∫—É—â–∏–π –∫–æ–º–º–∏—Ç: –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω" -ForegroundColor Gray
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
Write-Host "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è..." -ForegroundColor Cyan
git fetch origin

# –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç –∏–∑ origin
try {
    $latestCommit = git rev-parse origin/master
} catch {
    try {
        $latestCommit = git rev-parse origin/main
    } catch {
        Write-Host "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö" -ForegroundColor Red
        exit 1
    }
}

Write-Host "üìç –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–º–º–∏—Ç: $($latestCommit.Substring(0,8))" -ForegroundColor Gray

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
if (($currentCommit -eq $latestCommit) -and (-not $Force)) {
    Write-Host "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è. –£ –≤–∞—Å –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è." -ForegroundColor Green
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    if ($envBackup) { Remove-Item $envBackup.FullName }
    if ($sslBackup) { Remove-Item $sslBackup.FullName -Recurse }
    
    exit 0
}

Write-Host ""
Write-Host "üÜï –î–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ!" -ForegroundColor Green
Write-Host ""

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
Write-Host "üìù –ò–∑–º–µ–Ω–µ–Ω–∏—è:" -ForegroundColor Cyan
git log --oneline "$currentCommit..$latestCommit" | Select-Object -First 10

Write-Host ""
if (-not $Force) {
    $response = Read-Host "‚ùì –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ? (y/N)"
    if ($response -notmatch '^[Yy]$') {
        Write-Host "‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ" -ForegroundColor Red
        exit 0
    }
}

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞ –µ—Å–ª–∏ –æ–Ω –∑–∞–ø—É—â–µ–Ω
if ((Get-Command "docker" -ErrorAction SilentlyContinue) -and (Test-Path "docker-run.ps1")) {
    Write-Host "‚èπÔ∏è  –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞..." -ForegroundColor Yellow
    try {
        & ".\docker-run.ps1" stop
    } catch {
        Write-Host "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ —Å–∫—Ä–∏–ø—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º..." -ForegroundColor Yellow
    }
}

# –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥
Write-Host "‚¨áÔ∏è  –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è..." -ForegroundColor Cyan
try {
    git stash push -u -m "Auto-stash before update $(Get-Date)"
} catch {
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ stash –µ—Å–ª–∏ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
}

try {
    git pull origin master
} catch {
    git pull origin main
}

# –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º .env —Ñ–∞–π–ª
if ($envBackup) {
    Write-Host "üîß –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é .env..." -ForegroundColor Yellow
    Copy-Item $envBackup.FullName ".env"
    Remove-Item $envBackup.FullName
}

# –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
if ($sslBackup) {
    Write-Host "üîí –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã..." -ForegroundColor Yellow
    if (-not (Test-Path "ssl-certs")) {
        New-Item -ItemType Directory -Path "ssl-certs"
    }
    Copy-Item "$($sslBackup.FullName)\*" "ssl-certs\" -Recurse -Force
    Remove-Item $sslBackup.FullName -Recurse
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö
$requirementsChanged = git diff "$currentCommit" HEAD --name-only | Select-String "requirements.txt"
if ($requirementsChanged) {
    Write-Host "üì¶ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö - –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞" -ForegroundColor Yellow
    $rebuildNeeded = $true
} else {
    $rebuildNeeded = $false
}

# –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º Docker –æ–±—Ä–∞–∑ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
if ((Test-Path "Dockerfile") -and (Get-Command "docker" -ErrorAction SilentlyContinue)) {
    if ($rebuildNeeded) {
        Write-Host "üî® –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º Docker –æ–±—Ä–∞–∑..." -ForegroundColor Yellow
        if (Test-Path "docker-run.ps1") {
            & ".\docker-run.ps1" build
        } else {
            docker-compose build --no-cache
        }
    }
    
    Write-Host "‚ñ∂Ô∏è  –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞..." -ForegroundColor Green
    if (Test-Path "docker-run.ps1") {
        & ".\docker-run.ps1" start
    } else {
        docker-compose up -d
    }
} else {
    Write-Host "‚ö†Ô∏è  Docker –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –≤—Ä—É—á–Ω—É—é:" -ForegroundColor Yellow
    Write-Host "   python main.py"
}

$newCommit = git rev-parse HEAD
Write-Host ""
Write-Host "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!" -ForegroundColor Green
Write-Host "üÜï –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å $($currentCommit.Substring(0,8)) –¥–æ $($newCommit.Substring(0,8))" -ForegroundColor Cyan

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –µ—Å–ª–∏ Docker –¥–æ—Å—Ç—É–ø–µ–Ω
if (Test-Path "docker-run.ps1") {
    Write-Host ""
    Write-Host "üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:" -ForegroundColor Cyan
    try {
        & ".\docker-run.ps1" status
    } catch {
        Write-Host "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å" -ForegroundColor Yellow
    }
}

Write-Host ""
Write-Host "üéâ –ì–æ—Ç–æ–≤–æ! –ë–æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω." -ForegroundColor Green