import asyncio
import logging
from typing import Optional, Dict, Any
from telegram import Update, Bot
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    filters,
    ContextTypes
)
from telegram.error import TelegramError
from config import TelegramConfig


logger = logging.getLogger(__name__)


class TelegramBot:
    """Telegram –±–æ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self, config: TelegramConfig):
        self.config = config
        self.bot = Bot(token=config.bot_token)
        self.application = None
        self.alert_monitor = None
        
    def set_alert_monitor(self, alert_monitor):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ alert_monitor"""
        self.alert_monitor = alert_monitor
        
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        try:
            self.application = Application.builder().token(self.config.bot_token).build()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
            self.application.add_handler(CommandHandler("start", self._start_command))
            self.application.add_handler(CommandHandler("help", self._help_command))
            self.application.add_handler(CommandHandler("status", self._status_command))
            self.application.add_handler(CommandHandler("problems", self._problems_command))
            self.application.add_handler(CommandHandler("test", self._test_command))
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
            self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self._unknown_message))
            
            logger.info("Telegram bot initialized successfully")
            
        except Exception as e:
            logger.error(f"Failed to initialize Telegram bot: {e}")
            raise
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not self.application:
            await self.initialize()
            
        try:
            await self.application.initialize()
            await self.application.start()
            await self.application.updater.start_polling()
            
            logger.info("Telegram bot started and polling for updates")
            
        except Exception as e:
            logger.error(f"Failed to start Telegram bot: {e}")
            raise
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        if self.application:
            try:
                await self.application.updater.stop()
                await self.application.stop()
                await self.application.shutdown()
                logger.info("Telegram bot stopped")
            except Exception as e:
                logger.error(f"Error stopping Telegram bot: {e}")
    
    async def send_message(self, message: str, parse_mode: str = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            await self.bot.send_message(
                chat_id=self.config.target_chat_id,
                text=message,
                parse_mode=parse_mode or self.config.parse_mode,
                disable_web_page_preview=True
            )
            
            logger.debug(f"Message sent to chat {self.config.target_chat_id}")
            return True
            
        except TelegramError as e:
            logger.error(f"Failed to send message: {e}")
            return False
    
    async def send_alert(self, alert_data: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞–ª–µ—Ä—Ç–µ"""
        try:
            message = self._format_alert_message(alert_data)
            return await self.send_message(message)
            
        except Exception as e:
            logger.error(f"Failed to send alert: {e}")
            return False
    
    def _format_alert_message(self, alert_data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∞–ª–µ—Ä—Ç–µ"""
        problem = alert_data.get("problem", {})
        trigger = alert_data.get("trigger", {})
        hosts = alert_data.get("hosts", [])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å
        severity_map = {
            "0": "üü¢ Not classified",
            "1": "üîµ Information", 
            "2": "üü° Warning",
            "3": "üü† Average",
            "4": "üî¥ High",
            "5": "üî• Disaster"
        }
        
        severity = severity_map.get(problem.get("severity", "0"), "‚ùì Unknown")
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        host_name = hosts[0]["name"] if hosts else "Unknown Host"
        host_ip = ""
        if hosts and "interfaces" in hosts[0]:
            interfaces = hosts[0]["interfaces"]
            if interfaces:
                host_ip = f" ({interfaces[0].get('ip', 'N/A')})"
        
        problem_name = problem.get("name", "Unknown Problem")
        trigger_description = trigger.get("description", "No description")
        
        # –í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è
        event_time = problem.get("clock", "")
        if event_time:
            from datetime import datetime
            event_time = datetime.fromtimestamp(int(event_time)).strftime("%Y-%m-%d %H:%M:%S")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"""
üö® <b>Zabbix Alert</b>

{severity}
<b>Host:</b> {host_name}{host_ip}
<b>Problem:</b> {problem_name}
<b>Description:</b> {trigger_description}
<b>Time:</b> {event_time}
<b>Event ID:</b> {problem.get("eventid", "N/A")}

<b>Status:</b> {"üî¥ PROBLEM" if problem.get("r_eventid", "0") == "0" else "üü¢ RESOLVED"}
""".strip()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
        if problem.get("tags"):
            tags = []
            for tag in problem["tags"]:
                tag_value = tag.get("value", "")
                if tag_value:
                    tags.append(f"{tag['tag']}:{tag_value}")
                else:
                    tags.append(tag["tag"])
            
            if tags:
                message += f"\n<b>Tags:</b> {', '.join(tags)}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ —Ç—Ä–∏–≥–≥–µ—Ä—É –µ—Å–ª–∏ –µ—Å—Ç—å
        if trigger.get("comments"):
            message += f"\n<b>Comments:</b> {trigger['comments']}"
            
        return message
    
    async def _start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user_id = update.effective_user.id
        
        if user_id == self.config.target_chat_id:
            await update.message.reply_text(
                "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Zabbix.\n"
                "–Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö –≤ —Å–∏—Å—Ç–µ–º–µ.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
            )
        else:
            await update.message.reply_text(
                "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —è –Ω–∞—Å—Ç—Ä–æ–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."
            )
    
    async def _help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        user_id = update.effective_user.id
        
        if user_id == self.config.target_chat_id:
            help_text = """
üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Zabbix
/problems - –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ Zabbix
/test - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

üîî –Ø –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö –≤ Zabbix.
            """
            await update.message.reply_text(help_text, parse_mode='HTML')
        else:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
    
    async def _status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        user_id = update.effective_user.id
        
        if user_id == self.config.target_chat_id:
            if self.alert_monitor:
                await self.alert_monitor.send_status_message()
            else:
                await update.message.reply_text("‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        else:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
    
    async def _problems_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /problems"""
        user_id = update.effective_user.id
        
        if user_id == self.config.target_chat_id:
            if self.alert_monitor:
                await self.alert_monitor.send_problems_list()
            else:
                await update.message.reply_text("‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        else:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
    
    async def _test_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /test"""
        user_id = update.effective_user.id
        
        if user_id == self.config.target_chat_id:
            test_alert = {
                "problem": {
                    "eventid": "12345",
                    "name": "Test Problem",
                    "severity": "3",
                    "clock": str(int(asyncio.get_event_loop().time())),
                    "r_eventid": "0",
                    "tags": [{"tag": "test", "value": "alert"}]
                },
                "trigger": {
                    "description": "This is a test alert from Zabbix monitoring bot",
                    "comments": "Test trigger for bot verification"
                },
                "hosts": [{
                    "name": "Test Host",
                    "interfaces": [{"ip": "192.168.1.100"}]
                }]
            }
            
            success = await self.send_alert(test_alert)
            if success:
                await update.message.reply_text("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
        else:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
    
    async def _unknown_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        
        if user_id == self.config.target_chat_id:
            await update.message.reply_text(
                "ü§ñ –Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
            )
        else:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
    
    async def check_connection(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API"""
        try:
            me = await self.bot.get_me()
            logger.info(f"Connected to Telegram as @{me.username}")
            return True
        except TelegramError as e:
            logger.error(f"Failed to connect to Telegram: {e}")
            return False